{
  "name": "my first dotNetCore project",
  "tagline": "A simple introduction to Dot Net Core, creating a simple & sample project, publlishing it, all from DOS ",
  "body": "# dotNetCore\r\n\r\nA simple introduction to Dot Net Core & ASP.Net core. We will be creating the console application without Visual Studio or any other editor. It will be purely from DOS prompt (Old school way - Believe me its so much fun)\r\n\r\n# your first dotNetCore application\r\n\r\n### Step 1 - [Download](https://go.microsoft.com/fwlink/?LinkID=827524) the DotNet Core SDK.\r\n\r\n### Step 2- Open command prompt & Create a folder DotNetCore on your C Drive (You can make a different directory of your choice of location). We will be using this folder to hold all of our examples & demo\r\n\r\n    C:\\>md dotNetCore\r\n    C:\\>cd dotNetCore\r\n    C:\\>dotNetCore>\r\n\r\n###  Step 3- Create another folder inside this & name it as firstConsoleApp\r\n\r\n    C:\\dotNetCore>md firstConsoleApp\r\n    C:\\dotNetCore>cd firstConsoleApp\r\n    C:\\dotNetCore>firstConsoleApp>\r\n\r\n> The folding structure matters here. the folder we will be using for creating the application counts for name space of the project name & assembly name here.\r\n\r\n### Step 4\r\nYou have installed dotNetCore by now and have a folder to work with also. Now its the time to create first project. Lets try out first by checking if dotNetCore is successfully installed\r\n\r\nTry the following command\r\n\r\n    C:\\dotNetCore>firstConsoleApp>dotnet\r\n\r\nIf every thing works fine, it should give version and build number. As of today I got following with some more detail \r\n\r\n    Microsoft .NET Core Shared Framework Host\r\n      Version  : 1.0.1\r\n      Build    : cee57bf6c981237d80aa1631cfe83cb9ba329f12\r\n\r\n    Usage: dotnet [common-options] [[options] path-to-application]\r\n    \r\n    Common Options:\r\n      --help                           Display .NET Core Shared Framework Host help.\r\n      --version                        Display .NET Core Shared Framework Host version.\r\n\r\n    Options:\r\n      --fx-version <version>           Version of the installed Shared Framework to\r\n    use to run the application.\r\n      --additionalprobingpath <path>   Path containing probing policy and assemblies to probe for.\r\n\r\n    Path to Application:\r\n      The path to a .NET Core managed application, dll or exe file to execute.\r\n    \r\n    If you are debugging the Shared Framework Host, set 'COREHOST_TRACE' to '1' in y\r\n    our environment.\r\n    \r\n    To get started on developing applications for .NET Core, install .NET SDK from:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\n\r\n### Step 5 - Awesome, now we have everything ready, Lets create our first project. Write the command \"dotnet new\"\r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dotnet new\r\n    Created new C# project in C:\\dotnetcore\\firstconsoleapp.\r\n\r\nYou will see 2 files created in the folder. \r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dir\r\n     Volume in drive C is OS\r\n     Volume Serial Number is 5698-08AD\r\n    \r\n     Directory of C:\\dotnetcore\\firstconsoleapp\r\n    \r\n    10/14/2016  03:02 PM    <DIR>          .\r\n    10/14/2016  03:02 PM    <DIR>          ..\r\n    09/20/2016  12:08 AM               214 Program.cs\r\n    09/20/2016  12:08 AM               367 project.json\r\n                   2 File(s)            581 bytes\r\n                   2 Dir(s)  101,743,194,112 bytes free\r\n\r\n\r\nLet's see the content of these two files. Program.cs actually contains the application entry point. \r\n\r\n    C:\\dotnetcore\\firstconsoleapp>type program.cs\r\n    @using System;\r\n    \r\n    namespace ConsoleApplication\r\n    {\r\n        public class Program\r\n        {\r\n            public static void Main(string[] args)\r\n            {\r\n                Console.WriteLine(\"Hello World!\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nProject.json replaces the .csproj file and now it contains a list of all dependencies, environments, publish details etc.\r\n\r\n    C:\\dotnetcore\\firstconsoleapp>type project.json\r\n    {\r\n      \"version\": \"1.0.0-*\",\r\n      \"buildOptions\": {\r\n        \"debugType\": \"portable\",\r\n        \"emitEntryPoint\": true\r\n      },\r\n      \"dependencies\": {},\r\n      \"frameworks\": {\r\n        \"netcoreapp1.0\": {\r\n          \"dependencies\": {\r\n            \"Microsoft.NETCore.App\": {\r\n              \"type\": \"platform\",\r\n              \"version\": \"1.0.1\"\r\n            }\r\n          },\r\n          \"imports\": \"dnxcore50\"\r\n        }\r\n      }\r\n    }\r\n\r\nThat's it. We have created our first console application. Let's compile it and run it now.\r\n\r\n### Step 6 Restore the nuGet packages for application\r\n\r\nBefore we compile the application we need to restore all the packages and dependencies. To do that, lets run a restore commands, Its a kind of mandatory if you add any high level dependency to the project.json. \r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dotnet restore\r\n    log  : Restoring packages for C:\\dotnetcore\\firstconsoleapp\\project.json...\r\n    log  : Writing lock file to disk. Path: C:\\dotnetcore\\firstconsoleapp\\project.lock.json\r\n    log  : C:\\dotnetcore\\firstconsoleapp\\project.json\r\n    log  : Restore completed in 1477ms.\r\n\r\nProject.lock.json, What is this? So what restore process actually did? It went into project.json and looked for all framework, build options and created a list of all dependencies and loaded them into project.lock.json. So project.lock.json pretty much depends on project.json but it contains more detail. Take a look on project.lock.json it will have much more information\r\n\r\n    C:\\dotnetcore\\firstconsoleapp>type project.lock.json\r\n\r\n> Any time you add any dependency to project.json you need to restore the project. If you are using any IDE like visual studio code or visual studio they will do it for you when you build the project.\r\n\r\n### Step 7 Build the project\r\nYes now its the time to build the project. Issue the following command \"dotnet run\". \r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dotnet build\r\n    Project firstconsoleapp (.NETCoreApp,Version=v1.0) will be compiled because expected outputs are missing\r\n    Compiling firstconsoleapp for .NETCoreApp,Version=v1.0\r\n    \r\n    Compilation succeeded.\r\n        0 Warning(s)\r\n        0 Error(s)\r\n    \r\n    Time elapsed 00:00:01.5589169\r\n\r\nIf you view the directory now, it would have created two new folder (bin, obj) as part of the build process\r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dir\r\n     Volume in drive C is OS\r\n     Volume Serial Number is 5698-08AD\r\n    \r\n     Directory of C:\\dotnetcore\\firstconsoleapp\r\n    \r\n    10/14/2016  03:21 PM    <DIR>          .\r\n    10/14/2016  03:21 PM    <DIR>          ..\r\n    10/14/2016  03:21 PM    <DIR>          bin\r\n    10/14/2016  03:21 PM    <DIR>          obj\r\n    09/20/2016  12:08 AM               214 Program.cs\r\n    09/20/2016  12:08 AM               367 project.json\r\n    10/14/2016  03:14 PM           290,574 project.lock.json\r\n                   3 File(s)        291,155 bytes\r\n                   4 Dir(s)  101,726,756,864 bytes free\r\n\r\n### Step 8 Run the project - Yey its the time to run the application\r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dotnet run\r\n    Project firstconsoleapp (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.\r\n    Hello World!\r\n\r\nSo we see the output \"Hello World\". Just a reminder that the reason we don't need to provide any project name to run because its considering only one project in the parent folder\r\n\r\n### Step 9 Publish the project (Windows)\r\nThe final step of any application building process is publish. So issue the \"dotnet publish\" command, It will take all the required settings from project.json and publish the project for specific runtime (Default is windows).\r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dotnet publish\r\n    Publishing firstconsoleapp for .NETCoreApp,Version=v1.0\r\n    Project firstconsoleapp (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.\r\n    publish: Published to C:\\dotnetcore\\firstconsoleapp\\bin\\Debug\\netcoreapp1.0\\publish\r\n    Published 1/1 projects successfully\r\n\r\n>So what is special in dotNetCore as compared to ASP.Net, Yes its modular, fast and everything but the biggest advantage is same application can run on Linix, OSX. So now lets publish this application for Linux\r\n\r\n### Step 9 Publish the project for other run times \r\n\r\nLets make some changes publish process so that we can target different runtimes i.e. Linux or OSX. To do that we need to specify in project.json that about our target runtimes. Its called Runtime identifier & Here is the list of some [codes](https://docs.microsoft.com/en-us/dotnet/articles/core/rid-catalog) for each of the runtime. There are 2 steps which you need to follow. Add the following entry to project.json at root level\r\n\r\n    \"runtimes\": {\"win81-x64\": {}}\r\n\r\nRemove the following entry from \"Microsoft.NETCore.App\" object.\r\n    \"type\": \"platform\",\r\n\r\nSo your final config will look like following Download the sample here\r\n\r\n    {\r\n      \"version\": \"1.0.0-*\",\r\n      \"buildOptions\": {\r\n        \"debugType\": \"portable\",\r\n        \"emitEntryPoint\": true\r\n      },\r\n      \"dependencies\": {},\r\n      \"frameworks\": {\r\n        \"netcoreapp1.0\": {\r\n          \"dependencies\": {\r\n            \"Microsoft.NETCore.App\": {\r\n              \"version\": \"1.0.1\"\r\n            }\r\n          },\r\n          \"imports\": \"dnxcore50\"\r\n        }\r\n      },\r\n    \"runtimes\": {\"win81-x64\": {}}\r\n    }\r\n\r\n[Download Window 7 Project.json](https://github.com/Satindersatty/dotNetCore/blob/gh-pages/project.json_Window7Runtime)\r\n[Download OSX project.json])https://github.com/Satindersatty/dotNetCore/blob/gh-pages/Project.json_OSX)\r\n\r\nRun the restore and publish it. You are all set\r\n\r\n    C:\\dotnetcore\\firstconsoleapp>dotnet restore\r\n    log  : Restoring packages for C:\\dotnetcore\\firstconsoleapp\\project.json...\r\n    log  : Writing lock file to disk. Path: C:\\dotnetcore\\firstconsoleapp\\project.lock.json\r\n    log  : C:\\dotnetcore\\firstconsoleapp\\project.json\r\n    log  : Restore completed in 944ms.\r\n    \r\n    C:\\dotnetcore\\firstconsoleapp>dotnet publish\r\n    Publishing firstconsoleapp for .NETCoreApp,Version=v1.0/win81-x64\r\n    Project firstconsoleapp (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified\r\n    Compiling firstconsoleapp for .NETCoreApp,Version=v1.0\r\n    \r\n    Compilation succeeded.\r\n        0 Warning(s)\r\n        0 Error(s)\r\n    \r\n    Time elapsed 00:00:01.3415627\r\n\r\n\r\n    publish: Published to C:\\dotnetcore\\firstconsoleapp\\bin\\Debug\\netcoreapp1.0\\win81-x64\\publish\r\n    Published 1/1 projects successfully\r\n\r\n\r\n\r\nThanks for reading the blog.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}